#!/usr/bin/python3
# vim:se tw=0 sts=4 ts=4 et ai:
"""
Copyright Â© 2018 Osamu Aoki

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""
import argparse
import os       # for os.path.basename etc. 
import sys      # sys.stderr etc.
# To test this in place, setup a symlink with "ln -sf . poutils"
import poutils
#######################################################################
# main program
####################################################################### 
def po_combine():
    name = 'po_combine'
    p = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description = '''\
{0}: make a PO file by combining the master and translated POT  Version: {1}

This po_combine is a generic helper program to facilitate the reverse
translation workflow to create PO data from the master data and the translated
data.

{2}
'''.format(name, poutils.version, poutils.copyright),
            epilog='''\
## The normal workflow

Normal translation workflow using the gettext-like infrastructure is:

    master data --+--> POT --[translation]--> PO --+
                  +--------------------------------+--> translated data

The POT data is automatically generated without human intervention from the
master data.  Let's call this functionality as the POT extractor. E.g.: 

* xgettext (original tool by the gettext infrastructure covering strings in
  programs)
* po4a-gettextize without -l (from po4a covering SGML, DocBookXML, ...)
* itstool with -j (from itstool covering XML)
* sphinx.builders.gettext (MessageCatalogBuilder class in Sphinx covering RST)

The human translator adds the translation data to the POT data to make the PO
data.

The PO data can be automatically updated by the updated POT data using msgmerge
when the master data is updated.

The translated data can be generated by the updated PO data and the master
data. (Sometimes the PO data may need to be converted to the MO format by
msgfmt.)

* gettext() (embedded function by the gettext infrastructure, alias is _())
* po4a-translate (extension tool po4a generating l10n SGML, DocBookXML, ...)
* itstool with -m (extension tool itstool generating l10n XML)
* ??? (Sphinx may be converting directly to the final format data such html for
  each l10n targets from the combination of the master data and the PO data
  without generating l10n RST source.)

This workflow helps to keep up translated output in sync with the master
output.

## The reverse workflow

When you decide to change data format, migration of the PO data is a
non-trivial task even if there is a good conversion tool from the data format
to the new ones.  We need a reverse workflow to generate the PO data from the
master data and the corresponding translated data for any gettext derivative
infrastructure.

This po_combine provides a reverse workflow as follows:

    master data ------> POT --+
                              +--[po_combine] --> PO
    translated data --> POT --+

* the POT extractor of each tool infrastructure creates the master POT data by
  placing the converted master data in the normal master data position.
* the POT extractor of each tool infrastructure creates the translated POT data
  by placing the converted translated data in the normal master data position.
* Manually edit the converted master POT data and translated POT data to align
  and match exactly.
* the PO data generator po_combine creates the converted PO data from the
  master POT data and translated POT data.

The align and match task is optional.  If your PO system have files such as
add_*/ data, disabling such functionality will ensure matched source data to
avoid this task.

You can add some extracted markers such as untranslated strings (numbers,
embedded XML tags, ...) to the comment section of POT file before manually edit
them for alignment. This kind of marker strings and the original POT markers
such as "#. type: Content of: <book><chapter><title>" should make the align
and match task easier with this po_combine workflow.

For po4a, po4a-gettextize with -l option facilitates this functionality.
(Also, for poxml, split2po facilitates this functionality.) But I find the
requirement to align and match the master data and the translated data in their
original format is more trouble than doing it on the POT data.  So I see some
advantage of po_combine over po4a-gettextize even for po4a. YMMV.

TIP: pandoc is a nice document data format conversion tool.

See {}(1) manpage for more.
'''.format(name))
    p.add_argument("master_pot", help="POT file from the English source")
    p.add_argument("translated_pot", help="POT file from the translated source")
    p.add_argument("output", help="Output PO file")
    args = p.parse_args()
    master = poutils.PotData()
    translation = poutils.PotData()
    with open(args.master_pot, "r") as fp_master_pot:
        master.read_po(file=fp_master_pot)
        with open(args.translated_pot, "r") as fp_translated_pot:
            translation.read_po(file=fp_translated_pot)
    master.normalize()
    translation.normalize()
    master.combine_pots(translation)
    master.clean_msgstr(pattern_extracted=r'<screen>', pattern_msgid=r'^https?://')
    with open(args.output, "w") as fp_output:
        master.output_po(file=fp_output)
    return

#######################################################################
# This program functions differently if called via symlink
#######################################################################
if __name__ == '__main__':
    po_combine()
